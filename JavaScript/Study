document.getElementById 로 특정 Id의 요소를 찾는다.

document.getElementById('id').innerHTML = '' - 특정 Id요소의 내용을 읽거나 변경 
document.getElementById('id').src = '123.img'; - 특정 Id요소의 이미지 파일 경로를 바꿈
document.getElementById('id').style.display = "none" - 특정 Id요소를 숨김
document.getElementById('id').style.display = "block" - 특정 Id요소를 표시


HTML파일에서는 script태그 안에 JavaScript코드를 작성한다.
ex) <script>
  document.getElementById('id').innerHTML = "Hello";
    </script>

외부 파일로도 작성 가능 (파일명은 javascript.js 이런식으로 확장자명을 .js로 해야한다.)
동일한 코드가 여러번 실행되는경우 이 방법이 더 좋다.
외부 스크립트를 사용할 때에는 script태그 안에 src="javascript.js 이런식으로 외부 스크립트의 파일명이나 URL주소를 넣어줘야한다.


alert() 메서드로 페이지에 경고창을 띄울수있다.
console.log()는 괄호안의 데이터를 표시할 수 있다. 보통 디버깅 목적으로 많이 사용한다.



JavaScript 키워드
var - 변수 선언. 재선언, 재할당, 초기화 없이 선언 가능
let - 변수 선언. 재선언 불가능. 재할당, 초기화 없이 선언 가능
const - 변수 선언. 재선언, 재할당 불가능. 반드시 초기화를 해야함. (상수)
if - 조건문
switch - 여러가지 경우에 실행될 명령문
for - 루프에서 실행될 명령문
function - 함수 선언
return - 함수 종료



function으로 특정 작업을 수행하도록 할 수 있다.
ex) function myFunction(p1, p2) {
            return p1 * p2;
        }
        let result = myFunction(4, 3);
        document.getElementById("demo").innerHTML = result;
이 코드는 myFunction이라는 p1와 p2라는 변수를 받아서 p1*p2를 연산하는 결과를 돌려주는 함수이다.
그리고 myFunction(4,3)이라는 함수를 다시 result라는 변수에 할당하여 4*3이라는 연산 결과를 불러온다.
마지막으로 Id가 "demo"인 요소를 찾아서 result를 innerHTML이라는 메서드로 읽는 코드이다.


